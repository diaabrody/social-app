<?php
namespace Tests\Feature;
use Tests\CustomTestCase;

class AuthTest extends CustomTestCase{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_register_user(){
        $userInfo = [
            'email'=>'diaaOsama850@outlook.com' ,
            'password'=>'brodybrody' ,
            'password_confirmation'=>'brodybrody',
            'name'=>'diaa osama'
        ];
        $result=$this->postJson("/api/auth/register" , $userInfo)->json();
        $this->assertEquals($result['success'] , true);
        $this->assertNotEmpty($result['data']['token']);
    }

    public  function test_un_valid_data_for_register_user(){
        $userInfo = [
            'email'=>'' ,
            'password'=>'brodybrody' ,
            'password_confirmation'=>'brodybrodyd',
            'name'=>''
        ];
       $result = $this->postJson('/api/auth/register' , $userInfo)->json();
       $this->assertEquals($result['code'] , 422);
       $this->assertCount( 3, $result['data']['errors'] );
    }

    public function test_login_user(){
         $user= createUser();
         $this->postJson('/api/auth/login' , [
             'email' =>$user['email'] ,
             'password'=>$user['password']
         ])->assertStatus(200);
         $this->assertAuthenticated();
    }

    public  function test_un_valid_data_for_login_user(){
        $result=  $this->postJson('/api/auth/login' , [])
            ->assertStatus(422)->json();
        $this->assertCount( 2, $result['data']['errors'] );
        // un valid email
        $result=  $this->postJson('/api/auth/login' , [
            'email' =>'fakeemailyahoocom',
            'password'=>'fakepassword'
        ]) ->assertStatus(422);
        // fake account
         $this->postJson('/api/auth/login' ,  [
            'email' =>'fakeemail@yahoo.com',
            'password'=>'fakepassword'
        ])->assertStatus(403);
    }

    public function test_logout_user(){
        $this->login();
        $this->assertAuthenticated();
        $this->postJson('/api/auth/logout');
        $this->assertGuest();
    }

    public function test_refresh_token_user(){
         $authUser= $this->login();
         $result=$this->postJson('/api/auth/refresh')
             ->assertStatus(200)->json();
         $this->assertNotEmpty($result['data']['token']);
        $user= $this->login($authUser  , $result['data']['token']);
         $this->assertEquals($authUser , $user);
    }
}
